% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/array_transform.R
\name{apermArray}
\alias{apermArray}
\title{Array transposition}
\usage{
apermArray(
  a,
  perm = NULL,
  resize = TRUE,
  first = perm,
  keep_attributes. = FALSE
)
}
\arguments{
\item{a}{the array to be transposed}

\item{perm}{the subscript permutation vector, usually a permutation of the
integers 1:n, where n is the number of dimensions of a. When a has named
dimnames, it can be a character vector of length n giving a permutation of
those names. The default (used whenever perm has zero length) is to reverse
the order of the dimensions.}

\item{resize}{a flag indicating whether the vector should be resized as well
as having its elements reordered (default: TRUE)}

\item{first}{dimension(s) which should come first; either numeric index(es),
or if the array has named dimensions, 'first' can be a character vector.
Ignored if 'perm' is not NULL.}

\item{keep_attributes.}{see NOTE (default: FALSE)}
}
\value{
A transposed version of array \code{a}, with subscripts permuted as
indicated by the array \code{perm}. If \code{resize} is TRUE, the array is
reshaped as well as having its elements permuted, the dimnames are also
permuted; if \code{resize = FALSE} then the returned object has the same
dimensions as \code{a}, and the dimnames are dropped. In each case other
attributes are dropped unless \code{keep_attributes. = TRUE}. See NOTE!
}
\description{
Transpose an array by permuting its dimensions and optionally resizing it.
This function is a simple wrapper around \code{\link{aperm.default}} with two
minimal enhancements: 1) It checks if the permutation order is the same as
the original order of the dimensions. In this case it simply returns a copy
of the input array without any unnecessary time-consuming manipulation. See
also NOTE. 2) It allows for partial definition of the permutation order.
See argument 'first'.
}
\note{
The documentation of \code{aperm} wrongly states that "other
attributes are copied from \code{a}". Instead, \code{aperm} drops all
attributes other than \code{dim} and \code{dimnames}. To make
\code{apermArray} a replacement function of \code{aperm}, this unexpected
behaviour is also reproduced unless explicitly required by the user not to
do so.
}
\examples{
# example data
data(erps)
str(erps) # five dimensions

# a use case where argument 'first' is helpful: suppose we need 'time'
# as the first dimension
time_first <- apermArray(erps, first = "time")

# compare to the more cumbersome perm = setdiff(...) solution
time_first_aperm <- aperm(erps,
                          perm = c("time",
                                   setdiff(names(dimnames(erps)), "time")))
stopifnot(identical(time_first, time_first_aperm))

# create permutation order by simply replicating the original order;
# note that in this special case it is more efficient to request
# keep_attributes. = TRUE
perm <- seq_along(dim(erps))

# timing
if (require(microbenchmark)) {
    microbenchmark(
        aperm(erps, perm),
        apermArray(erps, perm),
        apermArray(erps, names(dimnames(erps))),
        apermArray(erps, perm, keep_attributes. = TRUE),
        times = 200L
    )
}

# check if identical
aperm_orig <- aperm(erps, perm)
stopifnot(identical(aperm_orig,
                    apermArray(erps, perm)))
stopifnot(identical(aperm_orig,
                    apermArray(erps, names(dimnames(erps)))))
stopifnot(all.equal(aperm_orig,
                    apermArray(erps, perm, keep_attributes. = TRUE),
                    check.attributes = FALSE))
stopifnot(identical(erps,
                    apermArray(erps, perm, keep_attributes. = TRUE)))

# if resize = FALSE, dimension names are dropped
noresize <- apermArray(erps, perm, resize = FALSE)
stopifnot(is.null(dimnames(noresize)))
stopifnot(identical(unname(aperm_orig),
                    noresize))

}
