% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/array_transform.R
\name{dropDims}
\alias{dropDims}
\title{Drop singleton dimensions of an array}
\usage{
dropDims(
  x,
  drop = TRUE,
  keep = NULL,
  return_array = TRUE,
  named_vector = TRUE,
  stop_if_missing = TRUE
)
}
\arguments{
\item{x}{an array (or a matrix, or a list with \code{dim} attribute)}

\item{drop}{1) either a single logical whether all singleton dimensions
should be dropped (default: TRUE); or 2) a logical, integer or character
vector indicating which dimensions to drop (if character, \code{x} must have
named dimensions). If \code{drop} is a vector (case 2), the referred
dimensions must be present in x.}

\item{keep}{an integer or character vector indicating those dimensions which
must remain in the returned value even if they are singletons (if character,
\code{x} must have named dimensions). Note that \code{keep} has a higher
priority than \code{drop}. Also note that to-be-kept dimensions which are
actually not present in \code{x} are simply ignored (instead of resulting in
error).}

\item{return_array}{logical value whether \code{dropDims} should return a
one-dimensional array instead of a vector even if all or all but one
dimension of \code{x} is dropped (default: TRUE)}

\item{named_vector}{logical value whether a vector result should be named
(TRUE, the default). Ignored if \code{return_array} is TRUE.}

\item{stop_if_missing}{logical value whether dropping or keeping
non-existent dimensions should result in error (TRUE, default), or should
be ignored (FALSE)}
}
\description{
\code{dropDims} drops singleton dimensions (whose lengths is 1) of a
multidimensional array. Compared to \code{\link[base]{drop}} and
\code{\link[abind]{adrop}} this function gives more control over which
singleton dimensions to drop.
}
\examples{
# create example data
x <- array(1:4, c(2, 1, 2, 1),
           dimnames = list(dimA = letters[1:2],
                           dimB = "a",
                           dimC = LETTERS[1:2],
                           dimD = "z"))

# drop all singleton dimensions
x0 <- dropDims(x)
stopifnot(identical(dim(x0), c(2L, 2L)))

# drop all singleton dimensions but always keep dimD
x1 <- dropDims(x, keep = "dimD")
stopifnot(identical(dim(x1), c(2L, 2L, 1L)))

# create a new example; a list with dim attribute
( x <- array(list(1:2, letters[1:2]), c(2, 1, 1),
             dimnames = list(type = c("numeric", "character"),
                             single1 = "a",
                             single2 = "b")) )

# drop the single1 dimension
x0 <- dropDims(x, "single1")
stopifnot(identical(dim(x0), c(2L, 1L)))

# wrong dimension in drop: by default, it results in an error
# (note that x has only 3 dimensions, not 4)
x1 <- try(dropDims(x, drop = 1:4), silent = TRUE)
stopifnot(inherits(x1, "try-error"))

# however, you can also ask for skipping those missing dimensions in 'drop'
# and 'keep'
x2 <- dropDims(x, drop = 1:4, stop_if_missing = FALSE)
stopifnot(identical(dim(x2), 2L))

# by default, dropDims returns an array, even if it has only one dimension
( x <- array(1:3, c(3, 1), list(dimA = letters[1:3], dimB = "A")) )
( x0 <- dropDims(x) )
stopifnot(is.array(x0))

# you can change this behaviour
( x1 <- dropDims(x, return_array = FALSE) )
stopifnot(!is.array(x1))

# vector results are named by default...
stopifnot(identical(names(x1), letters[1:3]))

# ...but not necessarily
( x2 <- dropDims(x, return_array = FALSE, named_vector = FALSE) )
stopifnot(is.null(names(x2)))
stopifnot(identical(unname(x1), x2))

}
